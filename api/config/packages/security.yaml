security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        #in_memory: { memory: ~ }

        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            anonymous: true
                        
            # Session based authentication (HTTPOnly Cookie) 
            #json_login: 
            #    check_path: app_login
            #    username_path: email
            #    password_path: password
            #    provider: app_user_provider
            
            # JWT authentication
            stateless: true
            json_login:
                check_path: /authentication_token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                provider: app_user_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
            
            logout:
                path: app_logout
                target: /
                
            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/users, roles: ROLE_SUPER_ADMIN, requires_channel: https, ip: 127.0.0.1 }
        - { path: ^/admins, roles: ROLE_SUPER_ADMIN, requires_channel: https, host: localhost }
        - { path: ^/admin, roles: ROLE_ADMIN, requires_channel: https }
        - { path: ^/suppliers, roles: ROLE_ADMIN, requires_channel: https, methods: [GET] }
        - { path: ^/supplier, roles: ROLE_MEMBER, requires_channel: https, methods: [GET] }
        - { path: ^/supplier, roles: ROLE_SUPPLIER, requires_channel: https, methods: [PUT,DELETE] }
        - { path: ^/customers, roles: ROLE_ADMIN, requires_channel: https }
        - { path: ^/customer, roles: ROLE_CUSTOMER, requires_channel: https }
        - { path: ^/profile, roles: ROLE_MEMBER, requires_channel: https }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }

    encoders:
        # Utilisation de la classe User
        App\Entity\User:
            # bcrypt or sodium recommandé
            # sodium est plus sûr, mais requiert PHP 7.2 ou l'extension Sodium
            algorithm: argon2i
        App\Entity\UserTemp:
            algorithm: argon2i

    role_hierarchy:
        ROLE_CUSTOMER: [ROLE_MEMBER, ROLE_ALLOWED_TO_SWITCH]
        ROLE_SUPPLIER: [ROLE_MEMBER, ROLE_ALLOWED_TO_SWITCH]
        ROLE_ADMIN:     [ ROLE_SUPPPLIER, ROLE_CUSTOMER, ROLE_MEMBER, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
